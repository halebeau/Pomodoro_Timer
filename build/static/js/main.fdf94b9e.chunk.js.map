{"version":3,"sources":["utils/duration/index.js","pomodoro/Subtitle.js","pomodoro/ProgressBar.js","pomodoro/Title.js","pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","secondsToDuration","givenSeconds","seconds","round","Subtitle","session","className","data-testid","timeRemaining","ProgressBar","breakDuration","focusDuration","barPercentage","label","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","Title","nextTick","prevState","max","nextSession","currentSession","Pomodoro","classNameToBoolean","useState","isTimerRunning","setIsTimerRunning","setSession","setFocusDuration","setBreakDuration","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","type","onClick","duration","disabled","aria-label","title","nextState","prevStateSession","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdf94b9e.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\n\nfunction Subtitle({ session, secondsToDuration }) {\n/* TODO: Update message below correctly format the time remaining in the current session */\n\nreturn (\n   <p className=\"lead\" data-testid=\"session-sub-title\">\n   {secondsToDuration(session?.timeRemaining)} remaining\n   </p>\n);\n}\n\nexport default Subtitle;\n","import React from \"react\";\n\nfunction ProgressBar({ session, breakDuration, focusDuration }) {\nconst barPercentage =\n   100 -\n   (session.timeRemaining /\n   ((`${session.label}` === \"Focusing\" ? focusDuration : breakDuration) *\n      60)) *\n   100;\nreturn (\n   <div className=\"row mb-2\">\n   <div className=\"col\">\n      <div className=\"progress\" style={{ height: \"20px\" }}>\n         <div\n         className=\"progress-bar\"\n         role=\"progressbar\"\n         aria-valuemin=\"0\"\n         aria-valuemax=\"100\"\n         aria-valuenow={barPercentage} // TODO: Increase aria-valuenow as elapsed time increases\n         style={{ width: `${barPercentage}%` }} // TODO: Increase width % as elapsed time increases\n         />\n      </div>\n   </div>\n   </div>\n);\n}\n\nexport default ProgressBar;","import React from \"react\";\nimport Subtitle from \"./Subtitle\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Title({\n  session,\n  minutesToDuration,\n  focusDuration,\n  secondsToDuration,\n  breakDuration,\n}) {\n  if (session) {\n    return (\n      <>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n              {session.label} for{\" \"}\n              {minutesToDuration(\n                session.label === \"Focusing\" ? focusDuration : breakDuration\n              )}{\" \"}\n              minutes\n            </h2>\n            <Subtitle session={session} secondsToDuration={secondsToDuration} />\n          </div>\n        </div>\n        <ProgressBar\n          session={session}\n          focusDuration={focusDuration}\n          breakDuration={breakDuration}\n        />\n      </>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default Title;","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport Title from \"./Title\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  function handleDecreaseFocus() {\n    if (focusDuration === 5) return;\n    setFocusDuration((duration) => duration - 5);\n  }\n  function handleIncreaseFocus() {\n    if (focusDuration === 60) return;\n    setFocusDuration((duration) => duration + 5);\n  }\n  function handleDecreaseBreak() {\n    if (breakDuration === 1) return;\n    setBreakDuration((duration) => duration - 1);\n  }\n  function handleIncreaseBreak() {\n    if (breakDuration === 15) return;\n    setBreakDuration((duration) => duration + 1);\n  }\n  function handleStop() {\n    setIsTimerRunning(false);\n    setSession(null);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              {/* TODO: Update this text to display the current focus session duration */}\n              Focus Duration: {minutesToDuration(focusDuration)}\n            </span>\n            <div className=\"input-group-append\">\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-focus\"\n                onClick={handleDecreaseFocus}\n                disabled={session}\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n              {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-focus\"\n                onClick={handleIncreaseFocus}\n                disabled={session}\n              >\n                <span className=\"oi oi-plus\" />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* TODO: Update this text to display the current break session duration */}\n                Break Duration: {minutesToDuration(breakDuration)}\n              </span>\n              <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                  onClick={handleDecreaseBreak}\n                  disabled={session}\n                >\n                  <span className=\"oi oi-minus\" />\n                </button>\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                  onClick={handleIncreaseBreak}\n                  disabled={session}\n                >\n                  <span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              disabled={!session}\n              onClick={handleStop}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n\n        <Title\n          session={session}\n          minutesToDuration={minutesToDuration}\n          focusDuration={focusDuration}\n          breakDuration={breakDuration}\n          secondsToDuration={secondsToDuration}\n          nextSession={nextSession}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\n export default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}